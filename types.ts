import React from 'react';

/**
 * Enum representing the supported marketplace platforms.
 * Using an enum provides type safety and autocompletion for platform names.
 */
export enum Platform {
  Ebay = 'Ebay',
  Facebook = 'Facebook',
  Craigslist = 'Craigslist',
  X = 'X',
}

/**
 * Defines the structure for platform-specific information, including its ID, name, and icon.
 * This is used to render the platform selection UI.
 */
export interface PlatformInfo {
  /** The unique identifier from the Platform enum. */
  id: Platform;
  /** The display name of the platform (e.g., "Facebook Marketplace"). */
  name: string;
  /** A React element representing the platform's icon. */
  icon: React.ReactElement;
}

/**
 * Represents a single bin in the price distribution histogram.
 * This is used to visualize the density of comparable listings at different price points.
 */
export interface PriceDistributionBin {
  /** The price range for the bin (e.g., "$180-$200"). */
  range: string;
  /** The number of comparable listings found within this price range. */
  count: number;
}

/**
 * Contains the detailed pricing analysis generated by the AI.
 * This object is a core part of the AI's structured response.
 */
export interface PriceAnalysis {
  /** A competitive price range for the item (e.g., "$200 - $250"). */
  range: string;
  /** A brief justification for the suggested price. */
  analysis: string;
  /** The AI's confidence level in its pricing analysis ('High', 'Medium', or 'Low'). */
  confidence: 'High' | 'Medium' | 'Low';
  /** The total number of comparable listings the AI found during its analysis. */
  comparableListingsCount: number;
  /** The average age in days of the active comparable listings, indicating market velocity. */
  averageListingAgeDays: number;
  /** An array of bins for a price distribution histogram. */
  priceDistribution: PriceDistributionBin[];
}

/**
 * Represents the complete listing object returned by the Gemini API.
 * This is the primary data structure for a newly generated listing.
 */
export interface GeneratedListing {
  /** The specific name of the item identified by the AI (e.g., "Sony WH-1000XM4 Headphones"). */
  itemName: string;
  /** The detailed pricing analysis for the item. */
  suggestedPrice: PriceAnalysis;
  /** The generated title, description, and tags tailored for the selected platform. */
  listing: {
    title: string;
    description: string;
    /** Optional array of tags, primarily used for platforms like Facebook Marketplace. */
    tags?: string[];
  };
}

/**
 * Represents a user-uploaded or camera-captured image file, stored in a format
 * suitable for embedding in the UI and sending to the Gemini API.
 */
export interface ImageFile {
  /** The base64-encoded string of the image data (without the data URL prefix). */
  base64: string;
  /** The MIME type of the image (e.g., 'image/jpeg', 'image/png'). */
  mimeType: string;
  /** The original name of the image file, if available. */
  name: string;
}

/**
 * A version of the generated listing specifically for the history.
 * This allows the `suggestedPrice` field to be a simple string for backward compatibility
 * with older data that was stored before the detailed `PriceAnalysis` object was introduced.
 */
export interface HistoryListing extends Omit<GeneratedListing, 'suggestedPrice'> {
    /** Can be the detailed `PriceAnalysis` object or a simple price range string for older items. */
    suggestedPrice: PriceAnalysis | string;
}

/**
 * Represents a single item in the user's generation history or saved listings.
 * This is the main object structure that gets saved to the Zustand store and localStorage.
 */
export interface HistoryItem {
  /** A unique identifier for the history item, typically a timestamp. */
  id: number;
  /** The platform the listing was generated for. */
  platform: Platform;
  /** The user's original input (text and/or image) that generated this listing. */
  input: {
    text: string;
    image: ImageFile | null;
  };
  /** The AI-generated listing data, using the backward-compatible format. */
  listingData: HistoryListing;
  /** An ISO 8601 timestamp string of when the item was created. */
  timestamp: string;
  /** An optional, user-provided custom title for better organization. */
  customTitle?: string;
}

/**
 * Defines the structure for storing all user-provided API keys.
 */
export interface ApiKeys {
  ebay: string;
  x: string;
  gemini: string;
  openai: string;
}

/**
 * Represents a single data point for the price history chart.
 * This is used to visualize pricing trends over time.
 */
export interface PriceHistoryPoint {
  /** The date for the data point in 'YYYY-MM-DD' format. */
  date: string;
  /** The average price for that date. */
  price: number;
}